@model akimedia.ViewModels.EditMovieViewModel

@{
    ViewBag.Title = "Добавить фильм";
}

<h2>Добавить новый фильм</h2>

@using (Html.BeginForm("Create", "Movies", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Movie.Id);

    <div class="row justify-content-center">
        <div class="col-8">
            <div class="form-group">
                @Html.LabelFor(m => m.Movie.Title)
                @Html.TextBoxFor(m => m.Movie.Title, new { @class = "form-control col-12" })
                @Html.ValidationMessageFor(m => m.Movie.Title)
            </div>
            <div class="form-group">
                <div class="form-check form-check-inline">
                    <label class="form-check-label p-0">
                        @Html.RadioButtonFor(m => m.Movie.Type, "FALSE", new { @checked = "" }) Фильм
                    </label>
                    
                </div>
                <div class="form-check form-check-inline">
                    <label class="form-check-label">
                        @Html.RadioButtonFor(m => m.Movie.Type, "TRUE") Сериал

                    </label>
                </div>
                
            </div>
            @Html.ValidationMessageFor(m => m.Movie.Type)
            <div class="form-group">
                @Html.LabelFor(m => m.Movie.DateReleased)
                @Html.TextBoxFor(m => m.Movie.DateReleased, new { @class = "form-control col-12" })
                @Html.ValidationMessageFor(m => m.Movie.DateReleased)
            </div>
            <div class="form-group">
                <label for="director-field">Режиссёр</label>
                <div class="tt-container">
                    <input type="text" id="director-field" class="form-control col-auto">
                </div>
                @Html.HiddenFor(m => m.Movie.DirectorId)
                @Html.ValidationMessageFor(m => m.Movie.DirectorId)
            </div>
            <div class="form-group">
                @Html.Label("genreList", "Жанры")
                @Html.DropDownList("genreList", new SelectList(Model.Genres, "Id", "Name"), "Выберите жанр", new { @class = "form-control col-12", id = "genreList" })

                <ul id="genres" class="list-group">
                    
                </ul>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Movie.Poster)
                <input type="file" class="form-control-file" name="Image">
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Movie.Description)
                @Html.TextAreaFor(m => m.Movie.Description, new { @class = "form-control col-12", rows = "5" })
                @Html.ValidationMessageFor(m => m.Movie.Description)
            </div>
            <button type="submit" class="btn btn-primary">Добавить</button>

        </div>
        <div class="col-4">
            <div class="row justify-content-center">
                <img src="~/Content/images/common/no_poster.jpg" class="img-fluid img-thumbnail">
            </div>
            <div class="row justify-content-center">
                <button class="btn btn-danger mt-2 align-self-center" type="button">Удалить</button>
            </div>
        </div>
    </div>
}

@section scripts 
{
    <script>
        $(document).ready(function() {

            var genres = [];
            var genreCount = 0;

            var directors = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace,
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/directors?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#director-field').typeahead({
                minLength: 2,
                highlight: true
            }, {
                    name: 'directors',
                    display: s => s.name + " " + s.surname,
                    source: directors
                }).on('typeahead:select', function(e, director) {
                    $("#Movie_DirectorId").val(director.id);
                });

            $('#genreList').change(function() {
                var genreId = $("#genreList").val();

                if (genres.indexOf(genreId) == -1) {
                    genres.push(genreId);
                    $("#genres").append("<li class='list-group-item'>" +
                        $('#genreList :selected').text() +
                        "<a class='delete-genre fa fa-times float-right'/>" +
                        "<input type='hidden' name='GenreIds' value=" + genreId + ">" +
                        "</li>");
                    genreCount++;
                }
            });

            $('body').on('click', '.delete-genre', function(event) {
                event.preventDefault();

                var val = $('#genreList :selected').val();
                console.log(val);
                for (i = 0; i < genres.length; i++) {
                    if (genres[i] === val) {
                        genres.splice(i, 1);
                        break;
                    }
                }

                $(this).parent().remove();
            });

        });

    </script>
}

